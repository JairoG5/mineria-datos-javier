kmeans, method = "wss", k.max = 17) +
geom_vline(xintercept = 3, linetype = 2) +
theme_minimal() +
labs(x = "nº clústeres (k)",
y = "Variabilidad total intra-clústeres (W)",
title = "Número óptimo basado en variabilidad total intra-clústeres")
silho <- silhouette(kclust$cluster, d)
silho
# Clustering (ward)
ward_clust <-
hclust(d, method = "ward.D2")
groups <- cutree(ward_clust, k = 3)
sil <- silhouette(groups, d)
#row.names(sil) <- row.names(esperanza_scale_df)
# Visualización
fviz_silhouette(sil, label = TRUE,
print.summary = FALSE) +
scale_fill_manual(values =
c("#2E9FDF", "#00AFBB",
"#E7B800")) +
scale_color_manual(values =
c("#2E9FDF", "#00AFBB",
"#E7B800")) +
theme_minimal() +
labs(title =
"Índice silhouette para jerárquico Ward con k = 3") +
# Giramos etiquetas eje
theme(axis.text.x =
element_text(angle = 90,
vjust = 0.5,
hjust = 1))
kclust <- kmeans(provincias_scale %>% select(-Prov),
centers = 3, iter.max = 54)
fviz_cluster(list(data =
provincias_scale %>% select(-Prov),
cluster = kclust$cluster),
ellipse.type = "convex",
repel = TRUE,
show.clust.cent = FALSE) +
labs(title = "Cluster (k-means)") +
theme_minimal()
# Completa el código
# Detalla todo lo que consideres sobre las constribuciones de cada
# variable a cada componente.
pca_fit$ind$contrib
fviz_eig(pca_fit,
barfill = "#85C1E9",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
print(pca_fit$svd$V)
# > Construye un gráfico para visualizar la varianza explicada acumulada
# > (con una línea horizontal que nos indica el umbral del 95%)
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("autovalor", "var", "cumvar")
ggplot(cumvar, aes(x = 1:18, y = cumvar)) +
geom_col(fill = "pink") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código
# Detalla todo lo que consideres sobre las constribuciones de cada
# variable a cada componente.
pca_fit$ind$contrib
fviz_eig(pca_fit,
barfill = "#85C1E9",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
print(pca_fit$svd$V)
# > Construye un gráfico para visualizar la varianza explicada acumulada
# > (con una línea horizontal que nos indica el umbral del 95%)
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("autovalor", "var", "cumvar")
ggplot(cumvar, aes(x = 1:18, y = cumvar)) +
geom_col(fill = "#F0B27A") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
#Contribucion de cada variable a las componentes
pca_fit$var$contrib
#Nuevas coordenadas de los datos
pca_fit$ind$coord
fviz_cos2(pca_fit,barfill = "#F5B041", choice = "var", axes = 1:2)
#Contribucion de cada variable a las componentes
pca_fit$var$contrib
#Nuevas coordenadas de los datos
pca_fit$ind$coord
fviz_cos2(pca_fit,barfill = "#85C1E9", choice = "var", axes = 1:2)
# Ajuste comunes de los chunk
knitr::opts_chunk$set(fig.width = 9, fig.asp = 1, out.width = "100%",
message = FALSE, warning = FALSE,
echo = TRUE, res = 400)
# Borramos variables del environment
rm(list = ls())
library(tidyverse)
library(tidymodels)
library(readxl)
library(skimr)
library(factoextra)
library(FactoMineR)
library(cluster)
library(corrplot)
library(scales)
provincias <- read_xlsx(path = "./provincias.xlsx")
glimpse(provincias)
# Completa el código y cambia a eval = TRUE
# Matriz de covarianzas
cov_mat <- cov(provincias %>% select(where(is.numeric)))
# Matriz de correlaciones
cor_mat <- cor(provincias %>% select(where(is.numeric)))
corrplot(cor_mat, type = "upper",
tl.col = "black",  method = "ellipse")
provincias_scale <-
provincias %>% mutate(across(where(is.numeric), rescale))
# Completa el código
autoelementos <- eigen(cov_mat)
autoelementos
pca_fit <-
PCA(provincias %>% select(where(is.numeric)), scale.unit = TRUE , ncp = 18, graph = TRUE)
pca_full <- provincias_scale %>% select(-Prov)
# Completa el código
# Detalla todo lo que consideres sobre las constribuciones de cada
# variable a cada componente.
pca_fit$ind$contrib
fviz_eig(pca_fit,
barfill = "#85C1E9",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
print(pca_fit$svd$V)
# > Construye un gráfico para visualizar la varianza explicada acumulada
# > (con una línea horizontal que nos indica el umbral del 95%)
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("autovalor", "var", "cumvar")
ggplot(cumvar, aes(x = 1:18, y = cumvar)) +
geom_col(fill = "#F0B27A") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código
# Detalla todo lo que consideres sobre las constribuciones de cada
# variable a cada componente.
pca_fit$ind$contrib
fviz_eig(pca_fit,
barfill = "#85C1E9",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
print(pca_fit$svd$V)
# > Construye un gráfico para visualizar la varianza explicada acumulada
# > (con una línea horizontal que nos indica el umbral del 95%)
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("autovalor", "var", "cumvar")
ggplot(cumvar, aes(x = 1:18, y = cumvar)) +
geom_col(fill = "#F0B27A") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
#Contribucion de cada variable a las componentes
pca_fit$var$contrib
#Nuevas coordenadas de los datos
pca_fit$ind$coord
fviz_cos2(pca_fit,barfill = "#85C1E9", choice = "var", axes = 1:2)
# Completa el código
A <- c()
for (i in 1:52) A[i] <- sum(pca_fit$svd$V[,1]*pca_full[i,])
A <- rescale(A)
provincias_range <- provincias_scale %>%   mutate(indice = A)
provincias_range
provincias_range$indice[30]
provincias_range$indice[31]
#Matriz de distancias. en "Method" le indico el tipo de metrica, el codigo
dse <- dist(provincias %>%
mutate(across(where(is.numeric))),
method = "euclidean")
d <- dist(provincias_scale %>% select(-Prov),
method = "euclidean")
#Matriz sin Estandarizar
fviz_dist(dse, show_labels = TRUE) +
labs(title = "Matriz de distancias (sin estandarizadar)")
#Matriz Estandarizada
fviz_dist(d, show_labels = TRUE)  +
labs(title = "Matriz de distancias (estandarizada)")
# Completa el código
# Dendograma (simple)
single_clust <- hclust(d, method = "single")
fviz_dend(single_clust, # Clustering
k = 3, # Nº de grupos
cex = 0.5, # Tamaño textos
k_colors = # colores
c("#E74C3C", "#5499C7",
"#8E44AD"),
# Diferentes colores a las etiqeutas
color_labels_by_k = TRUE,
# Añade un rectángulo alrededor
rect = TRUE) +
labs(title = "Dendograma (simple)")
#Dendograma (complete) | Clustering (complete
complete_clust <- hclust(d, method = "complete")
fviz_dend(complete_clust, k = 6,
cex = 0.5,
k_colors =
c("#E74C3C", "#5499C7", "#8E44AD", "#273746", "#28B463", "#E7B800"),
# Diferentes colores a los clusters
color_labels_by_k = TRUE,
#añade un rectángulo alrededor
rect = TRUE) +
labs(title = "Dendograma (complete)")
#Dendograma (average)
average_clust <-
hclust(d, method = "average")
# k = 3
fviz_dend(average_clust, k = 20,
cex = 0.5,
k_colors =
c("#2E9FDF", "#00AFBB", "#E7B800","#E74C3C", "#5499C7", "#8E44AD", "#273746", "#28B463"),
# Diferentes colores a los clusters
color_labels_by_k = TRUE,
#añade un rectángulo alrededor
rect = TRUE) +
labs(title = "Dendograma (average)")
kclust <- kmeans(provincias_scale %>% select(-Prov),
centers = 3, iter.max = 50)
fviz_nbclust(provincias_scale %>% select(-Prov), kmeans,
method = "silhouette", k.max = 17) +
theme_minimal() +
labs(x = "nº clústeres (k)",
y = "Variabilidad total intra-clústeres (W)",
title = "Número óptimo basado en silhouette")
fviz_nbclust(provincias_scale %>% select(-Prov),
kmeans, method = "wss", k.max = 17) +
geom_vline(xintercept = 3, linetype = 2) +
theme_minimal() +
labs(x = "nº clústeres (k)",
y = "Variabilidad total intra-clústeres (W)",
title = "Número óptimo basado en variabilidad total intra-clústeres")
silho <- silhouette(kclust$cluster, d)
silho
# Clustering (ward)
ward_clust <-
hclust(d, method = "ward.D2")
groups <- cutree(ward_clust, k = 3)
sil <- silhouette(groups, d)
#row.names(sil) <- row.names(esperanza_scale_df)
# Visualización
fviz_silhouette(sil, label = TRUE,
print.summary = FALSE) +
scale_fill_manual(values =
c("#2E9FDF", "#00AFBB",
"#E7B800")) +
scale_color_manual(values =
c("#2E9FDF", "#00AFBB",
"#E7B800")) +
theme_minimal() +
labs(title =
"Índice silhouette para jerárquico Ward con k = 3") +
# Giramos etiquetas eje
theme(axis.text.x =
element_text(angle = 90,
vjust = 0.5,
hjust = 1))
kclust <- kmeans(provincias_scale %>% select(-Prov),
centers = 3, iter.max = 50)
fviz_nbclust(provincias_scale %>% select(-Prov), kmeans,
method = "silhouette", k.max = 17) +
theme_minimal() +
labs(x = "nº clústeres (k)",
y = "Variabilidad total intra-clústeres (W)",
title = "Número óptimo basado en silhouette")
fviz_nbclust(provincias_scale %>% select(-Prov),
kmeans, method = "wss", k.max = 17) +
geom_vline(xintercept = 3, linetype = 2) +
theme_minimal() +
labs(x = "nº clústeres (k)",
y = "Variabilidad total intra-clústeres (W)",
title = "Número óptimo basado en variabilidad total intra-clústeres")
silho <- silhouette(kclust$cluster, d)
silho
# Clustering (ward)
ward_clust <-
hclust(d, method = "ward.D2")
groups <- cutree(ward_clust, k = 3)
sil <- silhouette(groups, d)
#row.names(sil) <- row.names(esperanza_scale_df)
# Visualización
fviz_silhouette(sil, label = TRUE,
print.summary = FALSE) +
scale_fill_manual(values =
c("#E74C3C", "#28B463",
"#E7B800")) +
scale_color_manual(values =
c("#E74C3C", "#28B463",
"#E7B800")) +
theme_minimal() +
labs(title =
"Índice silhouette para jerárquico Ward con k = 3") +
# Giramos etiquetas eje
theme(axis.text.x =
element_text(angle = 90,
vjust = 0.5,
hjust = 1))
kclust <- kmeans(provincias_scale %>% select(-Prov),
centers = 3, iter.max = 54)
fviz_cluster(list(data =
provincias_scale %>% select(-Prov),
cluster = kclust$cluster),
ellipse.type = "convex",
repel = TRUE,
show.clust.cent = FALSE) +
labs(title = "Cluster (k-means)") +
theme_minimal()
# Ajuste comunes de los chunk
knitr::opts_chunk$set(fig.width = 9, fig.asp = 1, out.width = "100%",
message = FALSE, warning = FALSE,
echo = TRUE, res = 400)
# Borramos variables del environment
rm(list = ls())
library(readxl)
library(skimr)
library(corrr)
library(corrplot)
library(tidyverse)
library(tidymodels)
library(factoextra)
library(FactoMineR)
library(ggforce)
distritos <- read_xlsx(path = "./distritos.xlsx")
glimpse(distritos)
# Completa el código y cambia a eval = TRUE
#JG: No aparece toda la informacion esperada, corri la linea en la consola para poder verla
distritos %>% skim()
# Completa el código y cambia a eval = TRUE
cov_mat <-
cov(distritos %>% select(where(is.numeric)))
cov_mat
# Completa el código y cambia a eval = TRUE
cor_mat <-
cor(distritos %>% select(where(is.numeric)))
cor_mat
corrplot(cor_mat, type = "upper",
tl.col = "black",  method = "ellipse")
# Completa el código y cambia a eval = TRUE
ggplot(distritos, aes(x = Analfabetos, y = T_paro)) +
geom_point(size = 7, alpha = 0.6) +
labs(x = "Analfabetos", y = "T_paro",
color = "rel",
title = "Gráficos de dispersión") +
theme_minimal()
# Completa el código y cambia a eval = TRUE
ggplot(distritos, aes(x = T_superiores, y = T_paro)) +
geom_point(size = 7, alpha = 0.6) +
labs(x = "T_paro", y = "T_superiores.",
title = "Relacion Estudios superiores con T_paro") +
theme_minimal()
# Completa el código y cambia a eval = TRUE
pca_fit <-
PCA(distritos %>% select(where(is.numeric)), scale.unit = TRUE , ncp = 23, graph = FALSE)
# Completa el código y cambia a eval = TRUE
#descomposicion en valores singulares, singular value decomposition (SVD) svd$V
#Autovalores: para mostrar los autovalores(varianza explicada por cada componente) basta con llamar
#pca_fit$eig(ya nos los da ordenados y con la varianza acumulada)
#para obtener los autovectores get_eig(pca_fit)
pca_fit$eig
# Completa el código y cambia a eval = TRUE
pca_scores <- as_tibble(pca_fit$ind$coord)
names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4", "PC_5","PC_6","PC_7","PC_8","PC_9","PC_10","PC_11","PC_12","PC_13","PC_14","PC_15","PC_16","PC_17","PC_18","PC_19","PC_20")
pca_scores # Nuevas coordenadas
# Completa el código y cambia a eval = TRUE
fviz_eig(pca_fit,
barfill = "darkolivegreen",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código y cambia a eval = TRUE
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("autovalor", "var", "cumvar")
ggplot(cumvar, aes(x = 1:20, y = cumvar)) +
geom_col(fill = "pink") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código y cambia a eval = TRUE
col <- c("#00AFBB", "#E7B800", "#FC4E07")
fviz_pca_var(pca_fit, col.var = "cos2",
gradient.cols = col,
repel = TRUE) +
theme_minimal() +
labs(title = "Coordenadas de las variables",
color = "Prop. var. explicada")
# Completa el código
fviz_cos2(pca_fit, choice = "var",
axes = 1:2)
# Completa el código
fviz_pca_biplot(pca_fit,
col.ind = distritos$Partido,
palette = "jco",
addEllipses = TRUE,
label = "var",
col.var = "black",
repel = TRUE,
legend.title = "Partido más votado")
receta <-
recipe(Partido  ~ ., data = distritos) %>%
# Imputamos por la media las numéricas, por la moda las cuali
step_impute_mean(all_numeric_predictors()) %>%
step_impute_mode(all_nominal_predictors()) %>%
# Estandarizamos
step_normalize(all_numeric_predictors()) %>%
# Filtro cero varianza
step_zv(all_numeric_predictors())
receta
receta <-
receta %>%
step_pca(all_numeric_predictors(), num_comp = 5,
prefix = "PC")
data_pc <- bake(receta %>% prep(), new_data = NULL)
data_pc
ggplot(data_pc,
aes(x = .panel_x, y = .panel_y,
color = Partido, fill = Partido)) +
geom_point(alpha = 0.4, size = 0.9) +
ggforce::geom_autodensity(alpha = 0.3) +
ggforce::facet_matrix(vars(-c(Distrito, Partido)), layer.diag = 2) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
labs(title = "PCA con tidymodels")
distritos <- read_xlsx(path = "./distritos.xlsx")
glimpse(distritos)
# Completa el código y cambia a eval = TRUE
#JG: No aparece toda la informacion esperada, corri la linea en la consola para poder verla
distritos %>% skim()
# Completa el código y cambia a eval = TRUE
cov_mat <-
cov(distritos %>% select(where(is.numeric)))
cov_mat
# Completa el código
#la suma de todas sus cordenadas al cuadrado me da 1
pca_fit$svd$V
# Completa el código y cambia a eval = TRUE
fviz_eig(pca_fit,
barfill = "#5441F5",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código y cambia a eval = TRUE
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("autovalor", "var", "cumvar")
ggplot(cumvar, aes(x = 1:20, y = cumvar)) +
geom_col(fill = "#239B56") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
pca_fit$ind$coor[,1]
pca_fit$ind$coor[,4]
receta <-
recipe(Partido  ~ ., data = distritos) %>%
# Imputamos por la media las numéricas, por la moda las cuali
step_impute_mean(all_numeric_predictors()) %>%
step_impute_mode(all_nominal_predictors()) %>%
# Estandarizamos
step_normalize(all_numeric_predictors()) %>%
# Filtro cero varianza
step_zv(all_numeric_predictors())
receta
receta <-
receta %>%
step_pca(all_numeric_predictors(), num_comp = 5,
prefix = "PC")
data_pc <- bake(receta %>% prep(), new_data = NULL)
data_pc
ggplot(data_pc,
aes(x = .panel_x, y = .panel_y,
color = Partido, fill = Partido)) +
geom_point(alpha = 0.4, size = 0.9) +
ggforce::geom_autodensity(alpha = 0.3) +
ggforce::facet_matrix(vars(-c(Distrito, Partido)), layer.diag = 2) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
labs(title = "PCA con tidymodels")
